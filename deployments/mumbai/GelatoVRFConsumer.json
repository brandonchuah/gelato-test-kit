{
  "address": "0xAF18D61AC60f6Ae53b3Ac35A49BD41739BB74648",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dedicatedMsgSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fulfilledCount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfilledTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfilledBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomness",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GelatoVRFConsumer.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "RandomnessFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dataWithRound",
          "type": "bytes"
        }
      ],
      "name": "fulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonceFulfilledCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "requestRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilledTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilledBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79c81e8d079c232db55f1858b65bf0437467954cb050dc09677e08013a841434",
  "receipt": {
    "to": null,
    "from": "0x5ce6047a715B1919A58C549E6FBc1921B4d9287D",
    "contractAddress": "0xAF18D61AC60f6Ae53b3Ac35A49BD41739BB74648",
    "transactionIndex": 2,
    "gasUsed": "637060",
    "logsBloom": "0x00000000010040000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000020100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000010000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000200000000100000000000000000000000000000000000000000000000000000000000000000040000100000",
    "blockHash": "0xbd38088d14117896cc346d1a1c75beb3aab63c2587629a442cb4febb514c6984",
    "transactionHash": "0x79c81e8d079c232db55f1858b65bf0437467954cb050dc09677e08013a841434",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 42781827,
        "transactionHash": "0x79c81e8d079c232db55f1858b65bf0437467954cb050dc09677e08013a841434",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ce6047a715b1919a58c549e6fbc1921b4d9287d",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006ca35450078000000000000000000000000000000000000000000000000000b6cf25f6346f7360000000000000000000000000000000000000000000000bba056cef5172525aa0000000000000000000000000000000000000000000000000b66282a1e467f360000000000000000000000000000000000000000000000bba05d992a5c259daa",
        "logIndex": 12,
        "blockHash": "0xbd38088d14117896cc346d1a1c75beb3aab63c2587629a442cb4febb514c6984"
      }
    ],
    "blockNumber": 42781827,
    "cumulativeGasUsed": "994590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD7089D182cB7b0005fF7dFdf8a86C828179a483"
  ],
  "numDeployments": 2,
  "solcInputHash": "f38e5906226af15d2bc3192f650cbaa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dedicatedMsgSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fulfilledCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GelatoVRFConsumer.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataWithRound\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceFulfilledCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RequestedRandomness(uint256,bytes)\":{\"params\":{\"data\":\"Additional data associated with the request.\"}}},\"kind\":\"dev\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"params\":{\"dataWithRound\":\"Additional data provided by Gelato VRF containing request details.\",\"randomness\":\"The random number generated by Gelato VRF.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RequestedRandomness(uint256,bytes)\":{\"notice\":\"Event emitted when a randomness request is made.\"}},\"kind\":\"user\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"notice\":\"Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vrf/GelatoVRFConsumer.sol\":\"GelatoVRFConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/vrf/GelatoVRFConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GelatoVRFConsumerBase} from \\\"./base/GelatoVRFConsumerBase.sol\\\";\\n\\ncontract GelatoVRFConsumer is GelatoVRFConsumerBase {\\n    struct Request {\\n        uint256 requestTime;\\n        uint256 requestBlock;\\n        uint256 fulfilledTime;\\n        uint256 fulfilledBlock;\\n        uint256 randomness;\\n    }\\n\\n    event RandomnessFulfilled(\\n        uint256 indexed nonce,\\n        uint256 indexed fulfilledCount,\\n        Request request\\n    );\\n\\n    address public immutable dedicatedMsgSender;\\n    uint256 public nonce;\\n    mapping(uint256 => mapping(uint256 => Request)) public requests;\\n    mapping(uint256 => uint256) public nonceFulfilledCount;\\n\\n    constructor(address _dedicatedMsgSender) {\\n        dedicatedMsgSender = _dedicatedMsgSender;\\n    }\\n\\n    function _operator() internal view override returns (address) {\\n        return dedicatedMsgSender;\\n    }\\n\\n    function requestRandomness(uint256 _count) external {\\n        for (uint256 i; i < _count; i++) {\\n            _requestRandomness(\\n                abi.encode(nonce, block.timestamp, block.number)\\n            );\\n        }\\n        nonce += 1;\\n    }\\n\\n    function _fulfillRandomness(\\n        uint256 _randomness,\\n        uint256,\\n        bytes memory _extraData\\n    ) internal override {\\n        (uint256 nonce_, uint256 requestTime, uint256 requestBlock) = abi\\n            .decode(_extraData, (uint256, uint256, uint256));\\n\\n        Request memory request = Request(\\n            requestTime,\\n            requestBlock,\\n            block.timestamp,\\n            block.number,\\n            _randomness\\n        );\\n\\n        uint256 fulfilledCount = nonceFulfilledCount[nonce_];\\n        uint256 newFulfilledCount = fulfilledCount + 1;\\n\\n        requests[nonce_][fulfilledCount] = request;\\n        nonceFulfilledCount[nonce_] = newFulfilledCount;\\n\\n        emit RandomnessFulfilled(nonce_, newFulfilledCount, request);\\n    }\\n}\\n\",\"keccak256\":\"0xf114613cd34a9bd1636c97584056ae9b14863c61e12bdb4ebf58a1d4cce66877\",\"license\":\"MIT\"},\"contracts/vrf/base/GelatoVRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGelatoVRFConsumer} from \\\"./IGelatoVRFConsumer.sol\\\";\\n\\n/// @title GelatoVRFConsumerBase\\n/// @dev This contract handles domain separation between consecutive randomness requests\\n/// The contract has to be implemented by contracts willing to use the gelato VRF system.\\n/// This base contract enhances the GelatoVRFConsumer by introducing request IDs and\\n/// ensuring unique random values.\\n/// for different request IDs by hashing them with the random number provided by drand.\\n/// For security considerations, refer to the Gelato documentation.\\nabstract contract GelatoVRFConsumerBase is IGelatoVRFConsumer {\\n    uint256 private constant _PERIOD = 3;\\n    uint256 private constant _GENESIS = 1692803367;\\n    bool[] public requestPending;\\n    mapping(uint256 requestId => bytes32 requestHash) public requestedHash;\\n\\n    /// @notice Returns the address of the dedicated msg.sender.\\n    /// @dev The operator can be found on the Gelato dashboard after a VRF is deployed.\\n    /// @return Address of the operator.\\n    function _operator() internal view virtual returns (address);\\n\\n    /// @notice User logic to handle the random value received.\\n    /// @param randomness The random number generated by Gelato VRF.\\n    /// @param requestId The ID for the randomness request.\\n    /// @param extraData Additional data from the randomness request.\\n    function _fulfillRandomness(\\n        uint256 randomness,\\n        uint256 requestId,\\n        bytes memory extraData\\n    ) internal virtual;\\n\\n    /// @notice Requests randomness from the Gelato VRF.\\n    /// @dev The extraData parameter allows for additional data to be passed to\\n    /// the VRF, which is then forwarded to the callback. This is useful for\\n    /// request tracking purposes if requestId is not enough.\\n    /// @param extraData Additional data for the randomness request.\\n    /// @return requestId The ID for the randomness request.\\n    function _requestRandomness(\\n        bytes memory extraData\\n    ) internal returns (uint256 requestId) {\\n        requestId = uint256(requestPending.length);\\n        requestPending.push();\\n        requestPending[requestId] = true;\\n\\n        bytes memory data = abi.encode(requestId, extraData);\\n        uint256 round = _round();\\n\\n        bytes memory dataWithRound = abi.encode(round, data);\\n        bytes32 requestHash = keccak256(dataWithRound);\\n\\n        requestedHash[requestId] = requestHash;\\n\\n        emit RequestedRandomness(round, data);\\n    }\\n\\n    /// @notice Callback function used by Gelato VRF to return the random number.\\n    /// The randomness is derived by hashing the provided randomness with the request ID.\\n    /// @param randomness The random number generated by Gelato VRF.\\n    /// @param dataWithRound Additional data provided by Gelato VRF containing request details.\\n    function fulfillRandomness(\\n        uint256 randomness,\\n        bytes calldata dataWithRound\\n    ) external {\\n        require(msg.sender == _operator(), \\\"only operator\\\");\\n\\n        (, bytes memory data) = abi.decode(dataWithRound, (uint256, bytes));\\n        (uint256 requestId, bytes memory extraData) = abi.decode(\\n            data,\\n            (uint256, bytes)\\n        );\\n\\n        bytes32 requestHash = keccak256(dataWithRound);\\n        bool isValidRequestHash = requestHash == requestedHash[requestId];\\n\\n        require(requestPending[requestId], \\\"request fulfilled or missing\\\");\\n\\n        if (isValidRequestHash) {\\n            randomness = uint(\\n                keccak256(\\n                    abi.encode(\\n                        randomness,\\n                        address(this),\\n                        block.chainid,\\n                        requestId\\n                    )\\n                )\\n            );\\n\\n            _fulfillRandomness(randomness, requestId, extraData);\\n            requestPending[requestId] = false;\\n        }\\n    }\\n\\n    /// @notice Computes and returns the round number of drand to request randomness from.\\n    function _round() private view returns (uint256 round) {\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 elapsedFromGenesis = block.timestamp - _GENESIS;\\n        uint256 currentRound = (elapsedFromGenesis / _PERIOD) + 1;\\n\\n        round = block.chainid == 1 ? currentRound + 4 : currentRound + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x7826d7cc77e2719c0b53abd50f52c4b1985ed6de263ba0027551d635ecd2ab33\",\"license\":\"MIT\"},\"contracts/vrf/base/IGelatoVRFConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @title IGelatoVRFConsumer\\n/// @dev Interface for consuming random number provided by Drand.\\n/// @notice This interface allows contracts to receive a random number provided by Gelato VRF.\\ninterface IGelatoVRFConsumer {\\n    /// @notice Event emitted when a randomness request is made.\\n    /// @param data The round of randomness to request.\\n    /// @param data Additional data associated with the request.\\n    event RequestedRandomness(uint256 round, bytes data);\\n\\n    /// @notice Callback function used by Gelato to return the random number.\\n    /// @dev The random number is fetched from one among many drand endpoints\\n    /// and passed back to this function like in a Gelato Web3 Function.\\n    /// @param randomness The random number generated by drand.\\n    /// @param data Additional data provided by Gelato VRF or the user, typically unused.\\n    function fulfillRandomness(\\n        uint256 randomness,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7b7dd9aa6c301c4e35c45fec162ae0d219211dc1583747c4efadc3c18e47c0ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b1a380380610b1a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610a89610091600039600081816092015261028f0152610a896000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639089add81161005b5780639089add814610137578063affed0e0146101a5578063b3f6b99a146101ae578063c4f8f27b146101c157600080fd5b806328f150eb1461008d57806372cc031b146100d15780637363ae1f146100ff57806375ce7fff14610114575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100df3660046106f1565b60046020526000908152604090205481565b6040519081526020016100c8565b61011261010d3660046106f1565b6101e1565b005b6101276101223660046106f1565b610250565b60405190151581526020016100c8565b61017d61014536600461070a565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460049093015491939092909185565b604080519586526020860194909452928401919091526060830152608082015260a0016100c8565b6100f160025481565b6101126101bc36600461072c565b610284565b6100f16101cf3660046106f1565b60016020526000908152604090205481565b60005b8181101561023457600254604080516020810192909252429082015243606082015261022190608001604051602081830303815290604052610464565b508061022c816107be565b9150506101e4565b5060016002600082825461024891906107d7565b909155505050565b6000818154811061026057600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f15760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9037b832b930ba37b960991b60448201526064015b60405180910390fd5b60006102ff8284018461085f565b91505060008082806020019051810190610319919061090d565b915091506000858560405161032f929190610990565b6040805191829003909120600085815260016020529182205482549193508314919085908110610361576103616109a0565b90600052602060002090602091828204019190069054906101000a900460ff166103cd5760405162461bcd60e51b815260206004820152601c60248201527f726571756573742066756c66696c6c6564206f72206d697373696e670000000060448201526064016102e8565b801561045a5760408051602081018a905230918101919091524660608201526080810185905260a0016040516020818303038152906040528051906020012060001c975061041c888585610565565b6000808581548110610430576104306109a0565b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055505b5050505050505050565b6000805460018082018084558380529192909183908110610487576104876109a0565b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550600081836040516020016104c59291906109b6565b604051602081830303815290604052905060006104e061069a565b9050600081836040516020016104f79291906109b6565b60408051601f198184030181528282528051602080830191909120600089815260019092529290208290559250907fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029061055490859087906109b6565b60405180910390a150505050919050565b60008060008380602001905181019061057e91906109f0565b6040805160a08101825283815260208082018490524282840152436060830152608082018c905260008681526004909152918220549497509295509093509091906105ca8260016107d7565b600087815260036020818152604080842087855282528084208851815582890151600182015581890151600282015560608901519381019390935560808801516004938401558a84529190529081902082905551909150819087907f68a16f4f90b6d7f45789532a60caffea6e389d90b71476ea0add119f245c63a990610687908790600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60405180910390a3505050505050505050565b6000806106ab6364e6212742610a1e565b905060006106ba600383610a31565b6106c59060016107d7565b9050466001146106df576106da8160016107d7565b6106ea565b6106ea8160046107d7565b9250505090565b60006020828403121561070357600080fd5b5035919050565b6000806040838503121561071d57600080fd5b50508035926020909101359150565b60008060006040848603121561074157600080fd5b83359250602084013567ffffffffffffffff8082111561076057600080fd5b818601915086601f83011261077457600080fd5b81358181111561078357600080fd5b87602082850101111561079557600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b6000600182016107d0576107d06107a8565b5060010190565b808201808211156107ea576107ea6107a8565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561082f5761082f6107f0565b604052919050565b600067ffffffffffffffff821115610851576108516107f0565b50601f01601f191660200190565b6000806040838503121561087257600080fd5b82359150602083013567ffffffffffffffff81111561089057600080fd5b8301601f810185136108a157600080fd5b80356108b46108af82610837565b610806565b8181528660208385010111156108c957600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156109045781810151838201526020016108ec565b50506000910152565b6000806040838503121561092057600080fd5b82519150602083015167ffffffffffffffff81111561093e57600080fd5b8301601f8101851361094f57600080fd5b805161095d6108af82610837565b81815286602083850101111561097257600080fd5b6109838260208301602086016108e9565b8093505050509250929050565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600082518060408401526109db8160608501602087016108e9565b601f01601f1916919091016060019392505050565b600080600060608486031215610a0557600080fd5b8351925060208401519150604084015190509250925092565b818103818111156107ea576107ea6107a8565b600082610a4e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122046ef9b11cd42179f06cc7cb37ba91869a720644ab9c030029319e1679f2ec76a64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639089add81161005b5780639089add814610137578063affed0e0146101a5578063b3f6b99a146101ae578063c4f8f27b146101c157600080fd5b806328f150eb1461008d57806372cc031b146100d15780637363ae1f146100ff57806375ce7fff14610114575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100df3660046106f1565b60046020526000908152604090205481565b6040519081526020016100c8565b61011261010d3660046106f1565b6101e1565b005b6101276101223660046106f1565b610250565b60405190151581526020016100c8565b61017d61014536600461070a565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460049093015491939092909185565b604080519586526020860194909452928401919091526060830152608082015260a0016100c8565b6100f160025481565b6101126101bc36600461072c565b610284565b6100f16101cf3660046106f1565b60016020526000908152604090205481565b60005b8181101561023457600254604080516020810192909252429082015243606082015261022190608001604051602081830303815290604052610464565b508061022c816107be565b9150506101e4565b5060016002600082825461024891906107d7565b909155505050565b6000818154811061026057600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f15760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9037b832b930ba37b960991b60448201526064015b60405180910390fd5b60006102ff8284018461085f565b91505060008082806020019051810190610319919061090d565b915091506000858560405161032f929190610990565b6040805191829003909120600085815260016020529182205482549193508314919085908110610361576103616109a0565b90600052602060002090602091828204019190069054906101000a900460ff166103cd5760405162461bcd60e51b815260206004820152601c60248201527f726571756573742066756c66696c6c6564206f72206d697373696e670000000060448201526064016102e8565b801561045a5760408051602081018a905230918101919091524660608201526080810185905260a0016040516020818303038152906040528051906020012060001c975061041c888585610565565b6000808581548110610430576104306109a0565b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055505b5050505050505050565b6000805460018082018084558380529192909183908110610487576104876109a0565b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550600081836040516020016104c59291906109b6565b604051602081830303815290604052905060006104e061069a565b9050600081836040516020016104f79291906109b6565b60408051601f198184030181528282528051602080830191909120600089815260019092529290208290559250907fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d2029061055490859087906109b6565b60405180910390a150505050919050565b60008060008380602001905181019061057e91906109f0565b6040805160a08101825283815260208082018490524282840152436060830152608082018c905260008681526004909152918220549497509295509093509091906105ca8260016107d7565b600087815260036020818152604080842087855282528084208851815582890151600182015581890151600282015560608901519381019390935560808801516004938401558a84529190529081902082905551909150819087907f68a16f4f90b6d7f45789532a60caffea6e389d90b71476ea0add119f245c63a990610687908790600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60405180910390a3505050505050505050565b6000806106ab6364e6212742610a1e565b905060006106ba600383610a31565b6106c59060016107d7565b9050466001146106df576106da8160016107d7565b6106ea565b6106ea8160046107d7565b9250505090565b60006020828403121561070357600080fd5b5035919050565b6000806040838503121561071d57600080fd5b50508035926020909101359150565b60008060006040848603121561074157600080fd5b83359250602084013567ffffffffffffffff8082111561076057600080fd5b818601915086601f83011261077457600080fd5b81358181111561078357600080fd5b87602082850101111561079557600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b6000600182016107d0576107d06107a8565b5060010190565b808201808211156107ea576107ea6107a8565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561082f5761082f6107f0565b604052919050565b600067ffffffffffffffff821115610851576108516107f0565b50601f01601f191660200190565b6000806040838503121561087257600080fd5b82359150602083013567ffffffffffffffff81111561089057600080fd5b8301601f810185136108a157600080fd5b80356108b46108af82610837565b610806565b8181528660208385010111156108c957600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156109045781810151838201526020016108ec565b50506000910152565b6000806040838503121561092057600080fd5b82519150602083015167ffffffffffffffff81111561093e57600080fd5b8301601f8101851361094f57600080fd5b805161095d6108af82610837565b81815286602083850101111561097257600080fd5b6109838260208301602086016108e9565b8093505050509250929050565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600082518060408401526109db8160608501602087016108e9565b601f01601f1916919091016060019392505050565b600080600060608486031215610a0557600080fd5b8351925060208401519150604084015190509250925092565b818103818111156107ea576107ea6107a8565b600082610a4e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122046ef9b11cd42179f06cc7cb37ba91869a720644ab9c030029319e1679f2ec76a64736f6c63430008120033",
  "devdoc": {
    "events": {
      "RequestedRandomness(uint256,bytes)": {
        "params": {
          "data": "Additional data associated with the request."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "params": {
          "dataWithRound": "Additional data provided by Gelato VRF containing request details.",
          "randomness": "The random number generated by Gelato VRF."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RequestedRandomness(uint256,bytes)": {
        "notice": "Event emitted when a randomness request is made."
      }
    },
    "kind": "user",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "notice": "Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 182,
        "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
        "label": "requestPending",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bool)dyn_storage"
      },
      {
        "astId": 186,
        "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
        "label": "requestedHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 29,
        "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 36,
        "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
        "label": "requests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Request)16_storage))"
      },
      {
        "astId": 40,
        "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
        "label": "nonceFulfilledCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Request)16_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GelatoVRFConsumer.Request))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Request)16_storage)"
      },
      "t_mapping(t_uint256,t_struct(Request)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GelatoVRFConsumer.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)16_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Request)16_storage": {
        "encoding": "inplace",
        "label": "struct GelatoVRFConsumer.Request",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
            "label": "requestTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9,
            "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
            "label": "requestBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11,
            "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
            "label": "fulfilledTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13,
            "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
            "label": "fulfilledBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15,
            "contract": "contracts/vrf/GelatoVRFConsumer.sol:GelatoVRFConsumer",
            "label": "randomness",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}